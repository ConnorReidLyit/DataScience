rm(x)
getwd
getwd()
my_data <- read.csv("Diabetes-md.csv")
setwd("C:/Users/Connor/Documents/MSc Computing in Big Data Analytics/Data Science/Practical")
my_data <- read.csv("Diabetes-md.csv")
str(my_data)
class(my_data)
colnames <- c("Patient Name", "NI Address", "Type", "Age", "Health Status")
colnames(my_data) <- c("Patient Name", "NI Address", "Type", "Age", "Health Status")
str(my_data)
rm(colnames)
?as.factor
factor(my_data$Type, levels = "Type 1", "Type 2")
? factor
factor(my_data$Type, labels = "Type 1", "Type 2")
str(my_data$Type)
sum(is.na(my_data$Type))
sum(!is.na(my_data$Type))
factor(my_data$Type, levels = c("Type 1", "Type 2"), labels = levels)
factor(my_data$Type, levels = c(1, 2), labels = c("Type 1", "Type 2"))
my_data <- read.csv("Diabetes-md.csv")
str(my_data)
class(my_data)
colnames(my_data) <- c("Patient Name", "NI Address", "Type", "Age", "Health Status")
str(my_data)
str(my_data$Type)
factor(my_data$Type, levels = c(1, 2), labels = c("Type 1", "Type 2"))
head(my_data$Type, 10)
head(my_data$Type, 20)
my_data <- read.csv("Diabetes-md.csv")
str(my_data)
class(my_data)
colnames(my_data) <- c("Patient Name", "NI Address", "Type", "Age", "Health Status")
str(my_data)
str(my_data$Type)
head(my_data$Type, 20)
str(my_data$Type)
factor(c, levels = c("", "Type 1", "Type 2"), labels = c("Nan", "Type 1", "Type 2"))
colnames(my_data) <- c("Patient Name", "NI Address", "Type", "Age", "Health Status")
str(my_data)
str(my_data$Type)
head(my_data$Type, 20)
head(my_data$Type, 20)
factor(c, levels = c("", "Type 1", "Type 2"), labels = levels)
str(my_data$Type)
factor(my_data$Type, labels = levels, ordered = TRUE)
head(my_data$Type, 20)
my_data <- read.csv("Diabetes-md.csv")
colnames(my_data) <- c("Patient Name", "NI Address", "Type", "Age", "Health Status")
str(my_data$Type)
factor(my_data$Type, labels = levels, ordered = TRUE)
my_data <- read.csv("Diabetes-md.csv")
str(my_data)
class(my_data)
colnames(my_data) <- c("Patient Name", "NI Address", "Type", "Age", "Health Status")
str(my_data)
my_data <- read.csv(data.frame("Diabetes-md.csv"))
my_data <- read.csv("Diabetes-md.csv")
str(my_data)
class(my_data)
colnames(my_data) <- c("Patient Name", "NI Address", "Type", "Age", "Health Status")
str(my_data)
str(my_data)
str(my_data$Type)
head(my_data$Type, 20)
factor(my_data$Type, labels = levels, ordered = TRUE)
getwd()
setwd("C:/Users/Connor/Documents/MSc Computing in Big Data Analytics/Data Science/Practical")
my_data <- read.csv("Diabetes-md.csv")
str(my_data)
class(my_data)
colnames(my_data) <- c("Patient Name", "NI Address", "Type", "Age", "Health Status")
str(my_data)
str(my_data$Type)
head(my_data$Type, 20)
factor(my_data$Type, order = TRUE,  levels = c("Type 1", "Type 2") )
str(my_data$Type)
head(my_data$Status, 20)
head(my_data$Health Status, 20)
colnames(my_data) <- c("Patient Name", "NI Address", "Type", "Age", "Health_Status")
head(my_data$Health_Status, 20)
factor(my_data$Health_Status, order = TRUE, levels = c("Excellent", "Improved", "Poor"))
factor(my_data$Health_Status, order = TRUE, levels = c("Poor", "Improved", "Excellent"))
str(my_data)
class(my_data)
str(my_data$Type)
factor(my_data$Type, order = TRUE,  levels = c("Type 1", "Type 2") )
factor(my_data$Type, order = TRUE,  levels = c("Type 1", "Type 2") )
factor(my_data$Type, order = TRUE,  levels = c("Type 1", "Type 2") )
str(my_data$Type)
patient_names <- my_data$names
head(patient_names, 10)
patient_names <- my_data$names[:1]
my_data$names[]
my_data$names
patient_names
my_data$'Patient Names'
attr(my_data)
colnames(my_data) <- c("Patient_Name", "NI_Address", "Type", "Age", "Health_Status")
str(my_data)
#Identify the structure of the Type column and update refactor it  
head(my_data$Type)
factor(my_data$Type, order = TRUE,  levels = c("Type 1", "Type 2") )
str(my_data$Type)
#Identify the structure of the Health_Status column and update refactor it from poor to excellent
head(my_data$Health_Status)
factor(my_data$Health_Status, order = TRUE, levels = c("Poor", "Improved", "Excellent"))
str(my_data$Health_Status)
#Review the structure of the dataframe to show all changes 
str(my_data)
# Create a copy of the names attribute into a data frame called patient_names.
# Show the first 10 names contained in patient_names.
patient_names <- data.frame(c(my_data$Patient_Name))
head(patient_names, 10)
patient_names <- data.frame(my_data$Patient_Name)
head(patient_names, 10)
class(patient_names)
patient_names <- data.frame(my_data$names)
head(patient_names, 10)
class(patient_names)
patient_names <- data.frame(my_data$Patient_Name)
head(patient_names, 10)
class(patient_names)
sum(is.na(my_data))
sum(my_data[my_data == '  '])
sum(is.na(my_data[X1]))
sum(is.na(my_data[1]))
sum(is.na(my_data$Patient_Name))
sum(my_data[my_data == ''])
sum(my_data[ == ''])
sum(my_data[''])
sum(is.na(my_data$Patient_Name))
sum(is.na(my_data$NI_Address))
sum(is.na(my_data$Type))
sum(is.na(my_data$Age))
sum(is.na(my_data$Health_Status))
sum(is.na(my_data))
my_data[my_data == ""] <- NA
sum(is.na(my_data))
head(my_data, 10)
sum(my_data[Patient_Name])
head(my_data, 10)
sum(my_data[Patient_Name])
getwd()
setwd("C:/Users/Connor/Documents/MSc Computing in Big Data Analytics/Data Science/Practical")
#Create a Dataframe of the Daibetes data and review its structure
my_data <- read.csv("Diabetes-md.csv")
str(my_data)
class(my_data)
#Create more suitable column names and update the dataframe column headers
colnames(my_data) <- c("Patient_Name", "NI_Address", "Type", "Age", "Health_Status")
str(my_data)
#Identify the structure of the Type column and update refactor it  
head(my_data$Type)
factor(my_data$Type, order = TRUE,  levels = c("Type 1", "Type 2") )
str(my_data$Type)
#Identify the structure of the Health_Status column and update refactor it from poor to excellent
head(my_data$Health_Status)
factor(my_data$Health_Status, order = TRUE, levels = c("Poor", "Improved", "Excellent"))
str(my_data$Health_Status)
#Review the structure of the dataframe to show all changes 
str(my_data)
# Create a copy of the names attribute into a data frame called patient_names.
# Show the first 10 names contained in patient_names.
patient_names <- data.frame(my_data$Patient_Name)
head(patient_names, 10)
class(patient_names)
#Examine how many missing values are in the data frame my_data. Count this value
sum(is.na(my_data)) # returns 3 NA as it does not count cells which are "blank"
my_data[my_data == ""] <- NA #update the "blank" cells to NA
sum(is.na(my_data)) #counts the total NA values after the "blank" values have been updated to NA
head(my_data, 10)
sum(my_data[Patient_Name])
sum(my_data)
str(my_data)
str(my_data)
my_data <- na.omit(my_data)
str(my_data)
getwd()
setwd("C:/Users/Connor/Documents/MSc Computing in Big Data Analytics/Data Science/Practical")
#Create a Dataframe of the Daibetes data and review its structure
my_data <- read.csv("Diabetes-md.csv")
str(my_data)
class(my_data)
#Create more suitable column names and update the dataframe column headers
colnames(my_data) <- c("Patient_Name", "NI_Address", "Type", "Age", "Health_Status")
str(my_data)
#Identify the structure of the Type column and update refactor it  
head(my_data$Type)
factor(my_data$Type, order = TRUE,  levels = c("Type 1", "Type 2") )
str(my_data$Type)
#Identify the structure of the Health_Status column and update refactor it from poor to excellent
head(my_data$Health_Status)
factor(my_data$Health_Status, order = TRUE, levels = c("Poor", "Improved", "Excellent"))
str(my_data$Health_Status)
#Review the structure of the dataframe to show all changes 
str(my_data)
# Create a copy of the names attribute into a data frame called patient_names.
# Show the first 10 names contained in patient_names.
patient_names <- data.frame(my_data$Patient_Name)
head(patient_names, 10)
class(patient_names)
#Examine how many missing values are in the data frame my_data. Count this value
sum(is.na(my_data)) # returns 3 NA as it does not count cells which are "blank"
my_data[my_data == ""] <- NA #update the "blank" cells to NA
sum(is.na(my_data)) #counts the total NA values after the "blank" values have been updated to NA
head(my_data, 10)
my_data <- na.omit(my_data)
str(my_data)
write.csv(MyData, file = "MyData.csv")
write.csv(my_data, file = "MyData.csv")
sum(is.na(my_data)) #counts the total NA values after the "blank" values have been updated to NA
getwd()
setwd("C:/Users/Connor/Documents/MSc Computing in Big Data Analytics/Data Science/Practical")
#Create a Dataframe of the Daibetes data and review its structure
my_data <- read.csv("Diabetes-md.csv")
str(my_data)
class(my_data)
#Create more suitable column names and update the dataframe column headers
colnames(my_data) <- c("Patient_Name", "NI_Address", "Type", "Age", "Health_Status")
str(my_data)
#Identify the structure of the Type column and refactor it  
head(my_data$Type)
factor(my_data$Type, order = TRUE,  levels = c("Type 1", "Type 2") )
str(my_data$Type)
#Identify the structure of the Health_Status column and update refactor it from poor to excellent
head(my_data$Health_Status)
factor(my_data$Health_Status, order = TRUE, levels = c("Poor", "Improved", "Excellent"))
str(my_data$Health_Status)
#Review the structure of the dataframe to show all changes 
str(my_data)
# Create a copy of the names attribute into a data frame called patient_names.
# Show the first 10 names contained in patient_names.
patient_names <- data.frame(my_data$Patient_Name)
head(patient_names, 10)
class(patient_names)
#Examine how many missing values are in the data frame my_data. Count this value
nrow(my_data) #show the number of rows of data prior to removing the NA values
sum(is.na(my_data)) # returns 3 NA as it does not count cells which are "blank"
my_data[my_data == ""] <- NA #update the "blank" cells to NA
sum(is.na(my_data)) #counts the total NA values after the "blank" values have been updated to NA
my_data <- na.omit(my_data)
nrow(my_data)
getwd()
setwd("C:/Users/Connor/Documents/MSc Computing in Big Data Analytics/Data Science/Practical")
#Create a Dataframe of the Daibetes data and review its structure
my_data <- read.csv("Diabetes-md.csv")
str(my_data)
class(my_data)
getwd()
setwd("C:/Users/Connor/Documents/MSc Computing in Big Data Analytics/Data Science/Practical")
#Create a Dataframe of the Daibetes data and review its structure
my_data <- read.csv("Diabetes-md.csv")
str(my_data)
class(my_data)
#Create more suitable column names and update the dataframe column headers
colnames(my_data) <- c("Patient_Name", "NI_Address", "Type", "Age", "Health_Status")
str(my_data)
#Identify the structure of the Type column and refactor it  
head(my_data$Type)
factor(my_data$Type, order = TRUE,  levels = c("Type 1", "Type 2") )
str(my_data$Type)
#Identify the structure of the Health_Status column and update refactor it from poor to excellent
head(my_data$Health_Status)
factor(my_data$Health_Status, order = TRUE, levels = c("Poor", "Improved", "Excellent"))
head(my_data$Type)
my_data$Type <- factor(my_data$Type, order = TRUE,  levels = c("Type 1", "Type 2") )
str(my_data$Type)
head(my_data$Health_Status)
my_data$Health_Status <- factor(my_data$Health_Status, order = TRUE, levels = c("Poor", "Improved", "Excellent"))
str(my_data$Health_Status)
head(my_data$Type)
my_data$Type <- factor(my_data$Type, order = TRUE,  levels = c("Type 1", "Type 2") )
str(my_data$Type)
#Identify the structure of the Health_Status column and update refactor it from poor to excellent
head(my_data$Health_Status)
my_data$Health_Status <- factor(my_data$Health_Status, order = TRUE, levels = c("Poor", "Improved", "Excellent"))
str(my_data$Health_Status)
#Review the structure of the dataframe to show all changes 
str(my_data)
patient_names <- data.frame(my_data$Patient_Name)
head(patient_names, 10)
class(patient_names)
my_data$Patient_Name
#Examine how many missing values are in the data frame my_data. Count this value
nrow(my_data) #show the number of rows of data prior to removing the NA values
sum(is.na(my_data)) # returns 3 NA as it does not count cells which are "blank"
my_data[my_data == ""] <- NA #update the "blank" cells to NA
sum(is.na(my_data)) #counts the total NA values after the "blank" values have been updated to NA
getwd()
setwd("C:/Users/Connor/Documents/MSc Computing in Big Data Analytics/Data Science/Practical")
#Create a Dataframe of the Daibetes data and review its structure
my_data <- read.csv("Diabetes-md.csv")
str(my_data)
class(my_data)
#Create more suitable column names and update the dataframe column headers
colnames(my_data) <- c("Patient_Name", "NI_Address", "Type", "Age", "Health_Status")
str(my_data)
#Identify the structure of the Type column and refactor it  
head(my_data$Type)
my_data$Type <- factor(my_data$Type, order = TRUE,  levels = c("Type 1", "Type 2") )
str(my_data$Type)
#Identify the structure of the Health_Status column and update refactor it from poor to excellent
head(my_data$Health_Status)
my_data$Health_Status <- factor(my_data$Health_Status, order = TRUE, levels = c("Poor", "Improved", "Excellent"))
str(my_data$Health_Status)
#Review the structure of the dataframe to show all changes 
str(my_data)
# Create a copy of the names attribute into a data frame called patient_names.
# Show the first 10 names contained in patient_names.
patient_names <- data.frame(my_data$Patient_Name)
head(patient_names, 10)
class(patient_names)
#Examine how many missing values are in the data frame my_data. Count this value
nrow(my_data) #show the number of rows of data prior to removing the NA values
sum(is.na(my_data)) # returns 3 NA as it does not count cells which are "blank"
my_data$Type
my_data$Health_Status
nrow(my_data) #show the number of rows of data prior to removing the NA values
sum(is.na(my_data)) # returns 20 NA as it does not count cells which are "blank"
my_data[my_data == ""] <- NA #update the "blank" cells to NA
sum(is.na(my_data)) #counts the total NA values after the "blank" values have been updated to NA
str(my_data) #review the dataframe to ensure there were no unintended consequences on converting the "" cells to NA
my_data <- na.omit(my_data) # remove all records with NA values from the dataframe
#Show number of rows after the NAs have been removed from the Dataframe
nrow(my_data)
getwd()
setwd("C:/Users/Connor/Documents/MSc Computing in Big Data Analytics/Data Science/Practical")
#Create a Dataframe of the Daibetes data and review its structure
my_data <- read.csv("Diabetes-md.csv")
str(my_data)
class(my_data)
#Create more suitable column names and update the dataframe column headers
colnames(my_data) <- c("Patient_Name", "NI_Address", "Type", "Age", "Health_Status")
str(my_data)
#Identify the structure of the Type column and refactor it  
head(my_data$Type)
my_data$Type <- factor(my_data$Type, order = TRUE,  levels = c("Type 1", "Type 2") )
str(my_data$Type)
#Identify the structure of the Health_Status column and update refactor it from poor to excellent
head(my_data$Health_Status)
my_data$Health_Status <- factor(my_data$Health_Status, order = TRUE, levels = c("Poor", "Improved", "Excellent"))
str(my_data$Health_Status)
#Review the structure of the dataframe to show all changes 
str(my_data)
# Create a copy of the names attribute into a data frame called patient_names.
# Show the first 10 names contained in patient_names.
patient_names <- data.frame(my_data$Patient_Name)
head(patient_names, 10)
class(patient_names)
#Examine how many missing values are in the data frame my_data. Count this value
nrow(my_data) #show the number of rows of data prior to removing the NA values
sum(is.na(my_data)) # returns 20 NA as it does not count cells which are "blank"
my_data[my_data == ""] <- NA #update the "blank" cells to NA
sum(is.na(my_data)) #counts the total NA values after the "blank" values have been updated to NA
my_data <- na.omit(my_data) # remove all records with NA values from the dataframe
nrow(my_data)
getwd()
setwd("C:/Users/Connor/Documents/MSc Computing in Big Data Analytics/Data Science/Practical")
#Create a Dataframe of the Daibetes data and review its structure
my_data <- read.csv("Diabetes-md.csv")
str(my_data)
class(my_data)
my_data <- read.csv("Diabetes-md.csv")
setwd("C:/Users/Connor/Documents/MSc Computing in Big Data Analytics/Data Science/Practical/Practical 1")
diabetes <- read.csv("Diabetes-md.csv")
str(diabetes)
colnames(diabetes) <- c("Patient_Name", "NI_Address", "Type", "Age", "Health_Status")
str(diabetes)
head(diabetes$Type)
diabetes$Type <- factor(diabetes$Type,  levels = c("Type 1", "Type 2") )
str(my_data$Type)
diabetes <- read.csv("Diabetes-md.csv")
str(diabetes)
class(diabetes)
#Create more suitable column names and update the dataframe column headers
colnames(diabetes) <- c("Patient_Name", "NI_Address", "Type", "Age", "Health_Status")
str(diabetes)
#Identify the structure of the Type column and refactor it  
head(diabetes$Type)
head(diabetes$Type)
diabetes$Type <- factor(diabetes$Type,  levels = c("Type 1", "Type 2") )
str(my_data$Type)
head(diabetes$Type)
str(diabetes$Type)
getwd()
setwd("C:/Users/Connor/Documents/MSc Computing in Big Data Analytics/Data Science/Practical/Practical 1")
#Create a Dataframe of the Daibetes data and review its structure
diabetes <- read.csv("Diabetes-md.csv")
str(diabetes)
class(diabetes)
#Create more suitable column names and update the dataframe column headers
colnames(diabetes) <- c("Patient_Name", "NI_Address", "Type", "Age", "Health_Status")
str(diabetes)
#Identify the structure of the Type column and refactor it  
head(diabetes$Type)
diabetes$Type <- factor(diabetes$Type,  levels = c("Type 1", "Type 2") )
str(diabetes$Type)
head(diabetes$Type)
rm(diabetes, envir = as.environment(".GlobalEnv"))
